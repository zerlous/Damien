<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Zerlous</title>
    <link>https://zerlous.com/posts/</link>
    <description>Recent content in Posts on Zerlous</description>
    <image>
      <url>https://zerlous.com/papermod-cover.png</url>
      <link>https://zerlous.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>**[© 浙ICP备18009882号](https://beian.miit.gov.cn)**</copyright>
    <lastBuildDate>Thu, 20 May 2021 10:05:13 +0800</lastBuildDate><atom:link href="https://zerlous.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>javascript 模块化异同</title>
      <link>https://zerlous.com/posts/js-modules-differ/</link>
      <pubDate>Thu, 20 May 2021 10:05:13 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/js-modules-differ/</guid>
      <description>CommonJS CommonJS为同步加载模式，主要应用场景为服务端，通常应用于Node.js的模块化输出与引用。核心的模块化环境变量有module、exports、require、global。
 require命令用于提供模块引用。 module.exports命令用以提供规范模块的输出。（创建后被引用，会创建引用缓存）  // a.js const text = &amp;#39;hello world&amp;#39;; const printText = (name) =&amp;gt; { console.log(text); console.log(&amp;#39;my name is &amp;#39;, name); }; module.exports = { printText } // b.js const { printText } = require(&amp;#39;./a.js&amp;#39;); printText(&amp;#39;zerlous&amp;#39;); // hello world // my name is zerlous  CommonJS主要采用同步加载模块，并且应用于服务端，大部分加载的文件资源都在本地服务器，所以执行效率很高。 不适用于客户端（浏览器端）。  AMD AMD (Asynchronous Module Definition)为异步加载模式，模块的加载不会产生阻塞，所有依赖该模块的的依赖语法都会在一个回调函数callback中，只有等依赖模块加载完成后，才会执行该回调函数。（* 核心RequireJS）。
核心的模块功能命令有define、require、return、define.amd。
 define为全局环境变量下的全局函数，用于定义模块。eg:define(id?, dependencies?, factory)。 require命令用于提供模块引用。 return命令用以提供规范模块的输出。 define.amd属性是一个对象，此属性的存在来表明函数遵循AMD 规范。  // a.js define(function() { const text = &amp;#39;hello world&amp;#39;; const printText = (name) =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>PX单位的wxs实现</title>
      <link>https://zerlous.com/posts/wxs-add-unit/</link>
      <pubDate>Tue, 18 May 2021 15:31:27 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/wxs-add-unit/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>BEM规范生成工具类wxs实现</title>
      <link>https://zerlous.com/posts/wxs-bem/</link>
      <pubDate>Tue, 18 May 2021 15:16:01 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/wxs-bem/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>记忆函数memoize的wxs实现</title>
      <link>https://zerlous.com/posts/wxs-memoize/</link>
      <pubDate>Tue, 18 May 2021 14:59:28 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/wxs-memoize/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>Javascript Data Structures</title>
      <link>https://zerlous.com/posts/javascript-data-structures/</link>
      <pubDate>Wed, 21 Apr 2021 15:13:36 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/javascript-data-structures/</guid>
      <description>数组（Array） 描述： 数组的内存分配为按需连续；可以在内存中连续存储多元素的数据结构体；通过数组下标访问获取数组的对应元素（0&amp;hellip;n）。 优点： 数组内元素查询快。（原因：数组的内存分配是连续的，可以通过首地址查询到数组，再通过下标索引快速查到对应元素）。 缺点： 数组内元素增/删慢。(原因：数组的长度固定，增删过程会先创建一个新的数组，并复制原有数组数据)
栈（Stack） 描述： 栈是一种特殊的仅可以支持单端操作的线性表，只可以在栈顶对元素进行入栈和出栈。 特点是先进后出（或后进先出） 优点： 数据存储获取快，栈内存由系统自动分配，并且用完会自动释放。通常用于存储基本数据类型（String，Number，Boolean，Null，Undefined） 缺点： 不灵活，数据存储大小与生命周期固定。
队列 （Queue） 描述： 队列是一种与栈类似，但仅支持队尾入队（新增），队首出队（删除）操作的线性表。 特点是先进先出 优点：</description>
    </item>
    
    <item>
      <title>Aaa</title>
      <link>https://zerlous.com/posts/aaa/</link>
      <pubDate>Wed, 24 Feb 2021 10:55:01 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/aaa/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://zerlous.com/posts/my-first-post/</link>
      <pubDate>Wed, 24 Feb 2021 10:15:53 +0800</pubDate>
      
      <guid>https://zerlous.com/posts/my-first-post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://zerlous.com/posts/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zerlous.com/posts/markdown-syntax/</guid>
      <description>Sample article showcasing basic Markdown syntax and formatting for HTML elements.</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>https://zerlous.com/posts/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zerlous.com/posts/rich-content/</guid>
      <description>A brief description of Hugo Shortcodes</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://zerlous.com/posts/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zerlous.com/posts/placeholder-text/</guid>
      <description>Lorem Ipsum Dolor Si Amet</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://zerlous.com/posts/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zerlous.com/posts/math-typesetting/</guid>
      <description>A brief guide to setup KaTeX</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://zerlous.com/posts/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zerlous.com/posts/emoji-support/</guid>
      <description>Guide to emoji usage in Hugo</description>
    </item>
    
  </channel>
</rss>
